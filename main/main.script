local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"
local tracking_id = require "utils.tracking_id"
local movedex = require "pokedex.moves"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local dex = require "pokedex.dex"
local items = require "pokedex.items"
local feats = require "pokedex.feats"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"
local filters = require "pokedex.filters"
local flow = require "utils.flow"
local metadata = require "utils.metadata"
local gui_colors = require "utils.gui_colors"
local notify = require "utils.notify"
local screeninfo = require "utils.screeninfo"
local log = require "utils.log"
local version = require "utils.version"

local function send_crash_on_start()
	crash.write_dump()
	local handle = crash.load_previous()
	if handle then
		gameanalytics.addErrorEvent {
			severity = "Error",
			message =  crash.get_extra_data(handle)
		}
		crash.release(handle)
	end
end

local function send_crash_analytics(source, message, traceback)
	gameanalytics.addErrorEvent {
		severity = "Critical",
		message = message .. "\n" .. traceback
	}
end

local function window_resized()
	msg.post("@render:", "window_event")
end

function init(self)
	print(version.check_version())
	local system = sys.get_sys_info().system_name
	window.set_listener(window_resized)
	
	if not gameanalytics then
		gameanalytics = require "utils.mock_gameanalytics"
		log.error("Could not load GameAnalytics")
	end
	send_crash_on_start()
	sys.set_error_handler(send_crash_analytics)
	defsave.appname = "pokedex5E"
	defsave.verbose = false
	defsave.use_default_data = false
	metadata.load()
	metadata.save()
	msg.post("@render:", "clear_color", {color=gui_colors.BACKGROUND})
	
	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	msg.post("/debug", "acquire_input_focus")
	msg.post("/menu", "acquire_input_focus")

	
	if system == "Windows" or system == "Darwin" then
		defos.set_view_size(0, 0, 720*0.5, 1280*0.5)
	end
	msg.post("#", "show_splash")
	movedex.init()
	natures.init()
	pokedex.init()
	profiles.init()
	storage.init()
	dex.init()
	items.init()
	filters.init()
	feats.init()
	flow.start(function()
		flow.delay(1)
		flow.until_true( function() return not monarch.is_busy() end)
		if profiles.is_new_game() or not profiles.get_active_slot() then
			msg.post("#", "show_profile")
			flow.until_true(function() return profiles.get_active_slot() end)
		end
		

		
		if #storage.list_of_ids_in_inventory() > 0 then
			msg.post("#", "show_party")
		elseif #storage.list_of_ids_in_storage() > 0 then
			msg.post("#", "show_storage")
		else
			msg.post("#", "show_add")
		end
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_profile") then
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Profiles",
			value = tracking_id[monarch.top()]
		}
		monarch.show("profiles")
	elseif message_id == hash("show_party") then
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Party",
			value = tracking_id[monarch.top()]
		}
		monarch.show("party")
	elseif message_id == hash("show_splash") then
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Splash",
			value = tracking_id[monarch.top()]
		}
		monarch.show("splash")
	elseif message_id == hash("show_storage") then
		gameanalytics.addDesignEvent {
			eventId = "Navigation:PC",
			value = tracking_id[monarch.top()]
		}
		monarch.show("storage")
	elseif message_id == hash("show_add") then
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Add",
			value = tracking_id[monarch.top()]
		}
		monarch.show("add")
	end
end


function final(self)
	storage.save()
end